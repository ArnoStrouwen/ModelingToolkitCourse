var documenterSearchIndex = {"docs":
[{"location":"syllabus/#ModelingToolkitCourse","page":"Syllabus","title":"ModelingToolkitCourse","text":"","category":"section"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"[!NOTE] This course is running live as part of MIT's IAP! For details see:18.S191 Special Subject in Mathematics: Composable System Modeling and Its CompilationDates: Jan 9 - Feb 2Time: MWF 11-12Location: 2-135","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Traditionally, modeling physical systems often requires a deep understanding of the physics and equations of motions or states, simplifying the differential equations using conservation laws and constraints, and finally implementing simplified equations in a scientific computing language to numerically solve them. However, this workflow is tedious and not expressive. A simple change in the underlying physical system often requires a complete re-derivation of the simplified equations. A composable modeling system frees domain experts from the time-consuming derivation, simplification, and implementation by allowing them to model each physical component separately and hierarchically, thereby enabling them to build more accurate and complex models without compromising the simulation performance. In this course, we will dive into the practice of implementing composable physical models and the compilation process of the model system using the ModelingToolkit.jl acausal modeling framework in Julia. Students will learn the mathematics and numerical methods behind solving industry-scale models, covering topics such as differential-algebraic equations (DAEs), modern techniques in implicit integrators (backwards differentiation formulae (BDFs)), symbolic manipulation of equations via techniques like Pantelides algorithm and tearing of nonlinear systems, and more. Applications for solving real-world problems like modeling battery systems of electric vehicles, efficient control of hydraulic and HVAC systems, and more will be used to demonstrate how these techniques are used in industrial settings.","category":"page"},{"location":"syllabus/#Syllabus","page":"Syllabus","title":"Syllabus","text":"","category":"section"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Prerequisites: While this course will be mixing ideas from symbolic computing, numerical differential equations, and topics from mechanical engineering, no one in the course is expected to have covered all of these topics before. Understanding of calculus, linear algebra, and programming is essential. The course is considered self-contained starting from the basic building blocks of undergraduate differential equations. Problem sets will involve use of Julia, a Matlab-like environment (little or no prior experience required; you will learn as you go), for doing acausal modeling via the ModelingToolkit.jl system.","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Textbook & Other Reading: There is no textbook for this course. For a textbook that covers the practical parts of doing modeling and simulation in an acausal way, Michael Tiller's \"Modelica by Example\" is a good reference (see https://mbe.modelica.university/). For a textbook that covers the algorithms of acausal modeling compilers, there is no recommended textbook and lecture notes will be supplied as a primary source.","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Grading: The final project proposal (due January 15th) is 25%, and 75% for the final project (due February 2nd). Final projects will be submitted electronically via email.","category":"page"},{"location":"syllabus/#Final-Project","page":"Syllabus","title":"Final Project","text":"","category":"section"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"The final project can take two forms: ","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Developing an acausal model of some real-world system. \nImplementation and analysis of a new acausal modeling compiler feature. \nImplementation and analysis of numerical methods for acausal models.","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"A final project proposal is due January 19th and the final project is due on the last day of the course. The last day will be final project presentations where the work is demonstrated to the class.","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"The final project's deliverable can take two different forms:","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"A final project writeup: a 5-10 page paper using the style template from the SIAM Journal on Numerical Analysis (or similar) explaining what was done, along with a Github repository package with the components of the model and docs/tests which demonstrate the successful composed model.\nA pull request to one of the libraries (ModelingToolkit, ModelingToolkitStandardLibrary, OrdinaryDiffEq, NonlinearSolve, etc.). For this version of the project, it is sufficient to supply a pull request to MTK/MSL with a description of the feature being implemented, tests of the transformation, and documentation showcasing its correct action on test models.","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"We expect the work to be roughly the same for the two routes, where the 1st would entail more theory and mathematical writeup while the latter is more focused on code and documentation. Note that any project considering doing a new acausal modeling feature should heavily consider doing the pull request route as writing a toy acausal modeling compiler within the timeframe of the course is likely to be unsuccessful.","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Note that many of these projects are starter projects towards publications. If you're interested in continuing this work after the IAP towards a publication, please discuss during the project selection page so the project can be appropriately scoped.","category":"page"},{"location":"syllabus/#Project-Type-1-Ideas:-Developing-an-Acausal-Model-of-A-Real-World-System","page":"Syllabus","title":"Project Type 1 Ideas: Developing an Acausal Model of A Real-World System","text":"","category":"section"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"The following sources can be used as inspiration:","category":"page"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Modelica \"other\" libraries (https://modelica.org/libraries/) \nModelica Standard Library (https://github.com/modelica/ModelicaStandardLibrary)","category":"page"},{"location":"syllabus/#Project-Type-2-Ideas:-Implementation-and-analysis-of-a-new-acausal-modeling-compiler-feature","page":"Syllabus","title":"Project Type 2 Ideas: Implementation and analysis of a new acausal modeling compiler feature","text":"","category":"section"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Automated Laplace and Fourier transforms\nAutomated function transformation of observables (i.e. log-transform states to enforce positivity)\nSymbolic generation of sensitivity analysis equations (https://github.com/SciML/ModelingToolkit.jl/issues/39)\nLamperti transformation of stochastic differential equations (https://github.com/SciML/ModelingToolkit.jl/issues/140)\nAutomated conversion of distributed delay equations into ODEs (https://github.com/SciML/ModelingToolkit.jl/issues/45)\nSpecialized nonlinear solvers based on strongly connected components\nInline integration (https://people.inf.ethz.ch/fcellier/Pubs/OO/esm_95.pdf)\nAutomated detection of events from discontinuities in the ODE/DAE definition\nPolynomial chaos expansions for fast uncertainty quantification\nDCP on OptimizationSystem to automatically transform nonlinear optimization problems to convex optimization problems (http://cvxr.com/cvx/doc/dcp.html)\nCommon subexpression elimination in Symbolic code generation\nExtendable C code generation maps from Symbolics\nDirect-quadrature-zero transformation for multibody systems and robotics (https://en.wikipedia.org/wiki/Direct-quadrature-zero_transformation)\nPryce's algorithm for DAE index reduction (https://link.springer.com/article/10.1023/A:1021998624799, https://inria.hal.science/hal-03104030v2/document)","category":"page"},{"location":"syllabus/#Project-Type-3-Ideas:-Implementation-and-analysis-of-numerical-methods-for-acausal-models","page":"Syllabus","title":"Project Type 3 Ideas: Implementation and analysis of numerical methods for acausal models","text":"","category":"section"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"Adaptive order Radau methods (https://www.sciencedirect.com/science/article/pii/S037704279900134X)\nParallel Rosenbrock and FIRK methods\nHandling the difficulties of BDFs in DAE systems (i.e. handling known deficiencies in the DFBDF algorithm)\nNew time stepping schema for Rosenbrock methods for DAE interpolation performance\nInvestigation of nonlinear solver globalization schemes for difficult DAE initialization problems","category":"page"},{"location":"syllabus/#Tenative-Schedule","page":"Syllabus","title":"Tenative Schedule","text":"","category":"section"},{"location":"syllabus/","page":"Syllabus","title":"Syllabus","text":"January 10th: Introduction to the course, Guest lecture: Brad Carman, introduction to acausal modeling for physical systems with ModelingToolkit\nJanuary 12th: Guest lecture: Brad Carman, developing high-fidelity models of hydraulic systems \nJanuary 15th: Martin Luther King Day!\nJanuary 17th: Real numerical methods for implicit equations and stiff ordinary differential equations (ODEs), i.e., Jacobian-free Newton-Krylov, adaptive time stepping, dense output, sparse automatic differentiation, event handling.\nJanuary 18th (Make up day for MLK day): Continuing discussion of stiff ODEs and onto numerical methods for differential-algebraic equations (DAEs). Rosenbrock methods, Backwards-Differentiation Formulae (BDF), fully-implicit Runge-Kutta methods.\nJanuary 19th: Finishing the discussion on stiff ODEs and DAEs. If time allows, discussion of handling inverse problems (parameter estimation), adjoint methods, uncertainty quantification, and the connections to reverse-mode AD.\nJanuary 22nd: Discussion and interactive workshop on debugging difficult stiff ODE/DAE models (featuring Brad Carman and Yingbo Ma).\nJanuary 24th: Guest Lecture: Yingbo Ma. How acausal model compilers work: index reduction. Pantelides algorithm, dummy derivatives, and demonstrations.\nJanuary 26th: Guest Lecture: Yingbo Ma. How acausal model compilers work: Tearing of nonlinear systems and alias elimination.\nJanuary 29th: Guest Lecture: Yingbo Ma. How acausal model compilers work: Loop rerolling, specialized optimizations for multibody systems, and other generated code robustness and performance optimizations.\nJanuary 31st: TBD based on what is not sufficiently covered earlier in the course.\nFebruary 2nd: Final project presentations!","category":"page"},{"location":"lectures/lecture2/#Lecture-2:-Developing-high-fidelity-models-of-hydraulic-systems","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"","category":"section"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Why focus on hydraulics?  The answer is essentially hydraulic modelling is really hard (in numerical computing terms, hydraulic models are often refered to as \"stiff\" ODE's, which require more rigorous solvers from standard ODE's).  Solving the challenges of modeling hydraulics is applicable to the numerical modeling challenges of all other domains.  Let's first start with the concept of compressibility.  Often we think of a liquid as incompressible, imagine attempting to \"squeeze\" water, it can be done but takes some very high forces.  Therefore, if the model in question won't be solving a problem with high forces, it can be assumed incompressible.  However, most hydrulic industrial models will involve high forces, this is precisly the area where most hydraulic machines are used.  ","category":"page"},{"location":"lectures/lecture2/#Compressibility","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Compressibility","text":"","category":"section"},{"location":"lectures/lecture2/#Density","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Density","text":"","category":"section"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Density is simply mass over volume","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"rho = mV","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Given a volume and mass of liquid, if the volume were to change from V_0 to V, we know that the pressure would increase, and since the mass in this case was constant, the density will increase as well.","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"(Image: volume change)","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"The change in pressure for an isothermal compressible process is typically given as","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Delta p = -beta fracDelta VV_0","category":"page"},{"location":"lectures/lecture2/#Calculating-Density-as-a-Function-of-Pressure","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Calculating Density as a Function of Pressure","text":"","category":"section"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Substituting Delta p and Delta V","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"p - p_0 = -beta fracV - V_0V_0","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"substituting V = m  rho","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"p - p_0 = -beta (1 - rhorho_0)  ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Solving for rho","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"rho = rho_0 (1 + (p - p_0)beta)","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Taking a known rho_0 when p_0 is 0 (at gage pressure), simplifies to","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"rho = rho_0 (1 + pbeta) ","category":"page"},{"location":"lectures/lecture2/#Change-in-Mass","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Change in Mass","text":"","category":"section"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Conservation of mass gives us","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"m_in - m_out = m_s ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"The stored mass of oil is simply","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"m_s = rho V ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Taking the derivative gives us the rate of mass change","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"dotm_in - dotm_out = fracdelta (rho V)delta t ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Here is where the standard hydraulic modeling gets the physics wrong...","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Correct Derivation (1):  ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"fracdelta (rho V)delta t = dotrho V + rho dotV ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Standard Practice[1] (2):  ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"colorred fracdelta (rho V)delta t = dotrho V + rho_0 dotV   ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Given dotrho = rho_0 (dotp  beta), and q = dotmrho_0 the above is often written as","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"colorred q_in - q_out = (dotp  beta) V + dotV ","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"[1]: See simscape hydraulic chamber.  Note the deprication warning moving to isothermal liquid library which uses the correct derivation.","category":"page"},{"location":"lectures/lecture2/#Example","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Example","text":"","category":"section"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"Problem Definition - Given","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"m_in = f(t)\nm = 3000 kg\nA = 900 cm^2\nrho_0 = 876 kgm^3\nbeta = 12e9 Pam^3\ng = 9807 ms^2","category":"page"},{"location":"lectures/lecture2/","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"(Image: example)","category":"page"},{"location":"#ModelingToolkit-Course","page":"Home","title":"ModelingToolkit Course","text":"","category":"section"},{"location":"lectures/lecture1/#Lecture-1:-Introduction-to-acausal-modeling-for-physical-systems-with-ModelingToolkit.jl","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"","category":"section"},{"location":"lectures/lecture1/#Background","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Background","text":"","category":"section"},{"location":"lectures/lecture1/#Julia","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Julia","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This course will use Julia as the fundamental tool to solve numerical problems.  ModelingToolkit.jl is a package writen in pure Julia and leverages the fundamental technologies of symbolic math from Symbolics.jl, numerical solvers from DifferentialEquations.jl, and automatic differentiation from ForwardDiff.jl.  To demonstrate an introduction to these technologeies, lets focus on one of the most fundamental engineering problems: the mass-spring-damper.  For now, let's leave the mass out of the system to avoid the 2nd derivative term and assume a non-linear spring (k cdot x^15)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: )","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This system can be represented by the ordinary differential equation (ODE):","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"d cdot dotx + k cdot x^15 = F","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To solve this in Julia we can apply finite differencing dotx_i = fracx_i - x_i-1Delta t and Newton's method.  Here we solve for the first time step...","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"using ForwardDiff\nusing Plots\n\nd=1\nk=1000\nΔt=1e-3\nF = 100\n\nfunction f(xᵢ, xᵢ₋₁)\n\n    ẋᵢ = (xᵢ - xᵢ₋₁)/Δt\n    lhs = d*ẋᵢ + k*xᵢ^1.5\n    rhs = F\n\n    return lhs - rhs\nend\n\n# Newton's Method\n# first time step (i=2)\nxᵢ₋₁ = 0.0\nxᵢ = xᵢ₋₁ #<-- guess\ng(xᵢ) = f(xᵢ, xᵢ₋₁)\nxᵢ -= g(xᵢ)/ForwardDiff.derivative(g, xᵢ)\nxᵢ -= g(xᵢ)/ForwardDiff.derivative(g, xᵢ)\nxᵢ -= g(xᵢ)/ForwardDiff.derivative(g, xᵢ)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"note: about derivatives\nWe can get the derivative for f from automatic differentiation using ForwardDiff.derivative (or using ForwardDiff.jacobian for a system of equations).","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"!!!","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To solve for a series of time steps, we can simply update x and run again for each time step Δt.  This is a simple form of the Implicit/Backwards Euler method.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"tol = 1e-3\nx = zeros(10)\nfor i=2:10\n    g(xᵢ) = f(xᵢ, x[i-1])\n    Δx = Inf\n    while abs(Δx) > tol\n        Δx = g(x[i])/ForwardDiff.derivative(g, x[i]) \n        x[i] -= Δx\n    end\nend\n\nplot(x; ylabel=\"x [m]\", xlabel=\"time step\")","category":"page"},{"location":"lectures/lecture1/#DifferentialEquations.jl","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"DifferentialEquations.jl","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"For this simple problem it's easy enough to implement the Newton method and solve directly, however it's possible to instead use the solvers from DifferentialEquations.jl.  To do this, we simply need to defined a NonlinearProblem by supplying the function f of the form f(up) where:","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"u is the variable (scalar or vector)\np is the parameters (scalar or vector)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"In this case u and p corespond to xᵢ and xᵢ₋₁, respectfully.  This is refered to as the \"out-of-place\" form, where each call to f allocates, it is also possible to define f(duup) as \"in-place\" form that gives du as a pre-allocated memory space to mutate.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Then we can solve by specifying the method, in this case we specify NewtonRaphson to implement Newton's method.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"using DifferentialEquations\n\nprob = NonlinearProblem(f, 0.0, 0.0)\nsol=solve(prob, NewtonRaphson(); abstol=tol)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note:  we get exactly the same result for the first time step.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To solve for a series of time steps, we can now use the remake function to update the initial guess u0 and parameter p and generate and updated NonlinearProblem efficiently.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"x = zeros(10)\nfor i=2:10\n    prob′ = remake(prob; u0=x[i], p=x[i-1])\n    sol = solve(prob′, NewtonRaphson(); abstol=tol)\n    x[i] = sol[]\nend\nplot(x; ylabel=\"x [m]\", xlabel=\"time step\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This approach requires the use of finite differencing and building a solution vector of solves for each time step, which was done only for demonstration purposes.  Since this problem is an ODE, it can and should be solved directly with an ODE solver.  To do this with DifferentialEquations.jl, we simply re-arrange the equation in the form fracpartial upartial t = f(upt).  In this case we have","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"dotx= fracF - k cdot x^15d","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"function du_dt(u,p,t)\n    F, k, d = p\n    x = u\n    return (F - k*x^1.5)/d\nend\n\nprob = ODEProblem(du_dt, 0.0, (0.0, 0.01), [F, k, d])\nsol = solve(prob)\nplot(sol; xlabel=\"time [s]\", ylabel=\"x [m]\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"In some cases, it may not be so easy to rearrange the equations in such a way to provide an ODE form.  We can also solve the problem in another way: Differential Algebraic Equations (DAE) form.  Here we have a mix of differential and algebraic equations.  A mass matrix is used to specify which equations are differential vs. algebraic.  Note that we are now solving for both x and dotx and therefore need to supply initial conditions for each.  To satisfy the system at time 0 with x=0, we can see that dotx = fracFd.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"function du_dt(u,p,t)\n    F, k, d = p\n    x, ẋ = u\n    \n    eqs = [\n        ẋ                       # D(x) = ẋ\n        (d*ẋ + k*x^1.5) - (F)   #    0 = ( lhs ) - ( rhs )\n    ]\n\n    return eqs\nend\n\nfmm = ODEFunction(du_dt; mass_matrix=[1 0; 0 0])\nprob = ODEProblem(fmm, [0.0, F/d], (0.0, 0.01), [F, k, d])\nsol = solve(prob)\nplot(sol; idxs=1, xlabel=\"time [s]\", ylabel=\"x [m]\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now, maybe we would like to know the 2nd derivative of x.  It should be easy enough to simply provide this in our function and solve.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"function du_dt(u,p,t)\n    F, k, d = p\n    x, ẋ, ẍ = u\n    \n    eqs = [\n        ẋ                       # D(x) = ẋ\n        ẍ                       # D(ẋ) = ẍ\n        (d*ẋ + k*(x^1.5)) - (F)   #    0 = ( lhs ) - ( rhs )\n    ]\n\n    return eqs\nend\n\nfmm = ODEFunction(du_dt; mass_matrix=[1 0 0;0 1 0;0 0 0])\nprob = ODEProblem(fmm, [0.0, F/d, 0.0], (0.0, 0.01), [F, k, d])\nsol = solve(prob)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now we get a DtLessThanMin code, meaning the solver failed to converge.  The reason for this is an index problem, our algebraic contraint equation does not use the 2nd derivative term ddotx.  To solve index problems, the algrebraic constraints must be differentiated until they contain the highest order terms.  This can be done as an exercise, however, this provides a perfect segway to the tool that can do this for us: ModelingToolkit.jl","category":"page"},{"location":"lectures/lecture1/#ModelingToolkit.jl","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"ModelingToolkit.jl","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"ModelingToolkit.jl uses symbolic math from Symbolics.jl to provide automatic index reduction and problem simplificaiton to provide the optimal form for a numerical solver.  To define the same problem attempted previously in ModelingToolkit.jl, we first specify an independant variable t and it's differential operator","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"using ModelingToolkit\n@variables t\nD = Differential(t)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note that t is now a symbolic term.  Writing sin(t) does not compute anything, it simply represents the funciton symbolically.  Writing D(sin(t)) then represents the derivative of sin(t) with respect to t.  To compute the derivative, we can use the function expand_derivatives","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"D(sin(t)) |> expand_derivatives","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To assemble a problem symbolically for ModelingToolkit.jl, we can define our variables and equations like","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"pars = @parameters F=100 d=1 k=1000\nvars = @variables x(t)=0.0 ẋ(t)=F/d ẍ(t)=0.0\neqs = [\n    D(x) ~ ẋ\n    D(ẋ) ~ ẍ\n    d*ẋ + k*x^1.5 ~ F\n]","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note the variables are defined as a function of the independent variable t and given initial conditions which is captured in the variable vars.  The equations are then defined using the tilde ~ operator, which represents the equation equality.  This information is then fed to an ODESystem constructor and simplified using the structural_simplify function.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@named odesys = ODESystem(eqs, t, vars, pars)\nsys = structural_simplify(odesys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"As can be seen, the 3 equation system is simplified down to 1 equation.  To see the solved states and equations we can use the respecive functions","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"states(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now we are solving for only x(t) with the equation:","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"equations(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This seems correct, but what is ẋ(t)?  This variable has been moved to the observables of the system, which are terms which can be computed algebraicly.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"observed(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Notice how the 2nd derivative term ẍ(t) has been automatically determined from the symbolic derivative of ẋ(t).","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"We can now assembly a problem and solve it.  The initial conditions do not need to be supplied here because the sys contains the variable defaults from vars.  The solution object sol can now be indexed symbolically from any symbol of the system regardles if it's a solved variable, observable, or even a parameter.  This way, if for example doing a batch of simulations, each respective solution object can easily retrieve all respective information about the simulation.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"prob = ODEProblem(sys, [], (0.0, 0.01))\nsol = solve(prob; abstol=tol)\nplot(sol; idxs=ẍ, xlabel=\"time [s]\", ylabel=\"ẍ [m/s^2]\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"The solution can also be indexed by expression, for example plotting the damping and spring force components can be done as so","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"plot(sol; idxs=x^1.5*k, xlabel=\"time [s]\", ylabel=\"force [N]\")\nplot!(sol; idxs=ẋ*d)","category":"page"},{"location":"lectures/lecture1/#Solving-a-system-of-equations-(NonlinearSystem)","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Solving a system of equations (NonlinearSystem)","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Use ModelingToolkit to solve the problem\nintroduce @parameters\nshow the f function\nshow the jacobian\nintroduce equations, defaults, and how to setup initial conditions and parameters","category":"page"},{"location":"lectures/lecture1/#[Practice-Problem]","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"[Practice Problem]","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"introduce remake\nplot a solution set (do something that errors once the initial conditions are not defaulted correctly)","category":"page"},{"location":"lectures/lecture1/#Acausal-Component-Based-Modeling","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Acausal - Component Based Modeling","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"ModelingToolkit.jl enables the appliction of Physical Network Acausal modeling, which is a type of modeling which is component based allowing one to build models by assembling parts together from a library.  The key to how this works is thru a simple rule of how components are connected.  A connection must define at minimum 2 variables (through and across) which follows the rules:","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"connections can only be made by like connectors (i.e. same pairs of through and across variables from the same physical domain)\nthrough variables sum to zero at connection points\nacross variables are equal at connection points","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Consider a simple mechanical translational system of a mass and damper.  In this domain the through variable is force (f) and the across velocity (v).  We can define the mass component as","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"f_mass = m_mass cdot dotv_mass","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"And the damper component as","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"f_damper = d_damper cdot v_damper","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Based on the rules above, connecting these 2 components together would give the following additional equations","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"beginaligned \n    0 = f_mass + f_damper  \n    v_mass = v_damper \nendaligned  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"With simple substitution it can be seen that this gives the expected mass-damper system","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"m cdot dotv + d cdot v = 0","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Let's try this again by defining this system in ModelingToolkit.jl","category":"page"},{"location":"lectures/lecture1/#Connections","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Connections","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"demonstrate the theory of connections\nTODO: reference to where nodal network modeling originated?\nthru variables sum\naccross variables are equal\nQuestion: does the across variable have to be velocity?  Could it be any other derivative?","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To define a connection in ModelingToolkit.jl we use the @connector macro and specify the through variable with connect = Flow","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@connector MechanicalPort begin\n    v(t)\n    f(t), [connect = Flow]\nend","category":"page"},{"location":"lectures/lecture1/#Components","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Components","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"demonstrate how components are defined\nbest practices","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To define a component, we use the @mtkmodel macro and define it's parameters, variables, connection ports, and equations.  The mass component can be defined as","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Mass begin\n    @parameters begin\n        m = 10\n    end\n    @variables begin\n        v(t)\n        f(t)\n    end\n    @components begin\n        port = MechanicalPort()\n    end\n    @equations begin\n        # connectors\n        port.v ~ v\n        port.f ~ -f\n        \n        # physics\n        f ~ m*D(v)\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now there are 2 tricky issues when defining models at the component level.  First is the number of equations.  How can you know if you've properly defined a base component without having the remaining parts to close the system and ensure you have a matching set of variables and equations?  A general rule of thumb is that a base level component should have an equation number that matches the number of variables + connectors.  The Mass component has 2 variables and 1 connector and therefore 3 equations.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"The 2nd tricky issue is signs.  Note that the force assigned to the port is negative port.f ~ -f.  To determine this I like to draw a diagram like below.  Below the port in black I draw the connection variables, here there is 1 port and I draw them to the right (i.e. positive direction).  Then in green above the port I draw the coresponding variables of the component.  In this case we know from Newton that mass x acceleration equals force, therefore the direction of movement is in the opposite direction of the force.  In other words, if we push the mass from left to right (i.e. in the positive direction), then the mass will generate a force in the negative direction.  Now the diagram shows how the port and component variables are aligned.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: mass)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Similarly the damper component is defined as below.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Damper begin\n    @parameters begin\n        d = 1\n    end\n    @variables begin\n        v(t)\n        f(t)\n    end\n    @components begin\n        port = MechanicalPort()\n    end\n    @equations begin\n        # connectors\n        port.v ~ v\n        port.f ~ -f\n        \n        # physics\n        f ~ d*v\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: single port damper)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now the Mass and Damper components can be assembled in a system and connected together (note: the connect equation).  Also note the parameters v, m, and d are defined to expose the properties which can be set at keyword arguments of the same name.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel System begin\n    @parameters begin\n        v\n        m\n        d\n    end\n    @components begin\n        mass = Mass(;v,m)\n        damper = Damper(;v,d)\n    end\n    @equations begin\n        connect(mass.port, damper.port)\n    end\nend\n\n@mtkbuild sys = System(;v=100, m=5, d=3)\nfull_equations(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"As can be seen we arrive at the same equation as derived previously.  Now it would be easy to define a system that adds a spring, or has a series of connected masses, springs, dampers, etc.  ","category":"page"},{"location":"lectures/lecture1/#[Practice-Problem]-2","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"[Practice Problem]","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"add a spring component to the above system\nhow to define a spring or damper with 2 ports?","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"The Damper component created previously was a little incomplete because it only had one port.  In reality a damper or spring will be connected between 2 objects, for example the car frame and the wheel.  Therefore a proper component will define 2 ports so that the component can be as analogous with real life as possible.  In the example below the component is defined properly with 2 ports.  Note the velocity of the component v is defined as a relative velocity between the 2 ports.  It's easy to understand how this works if it's assumed that port_b is connected to a stationary reference frame.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Damper begin\n    @parameters begin\n        d = 1\n    end\n    @variables begin\n        v(t)\n        f(t)\n    end\n    @components begin\n        port_a = MechanicalPort()\n        port_b = MechanicalPort()\n    end\n    @equations begin\n        # connectors\n        (port_a.v - port_b.v) ~ v\n        port_a.f ~ -f\n        port_b.f ~ +f\n        \n        # physics\n        f ~ d*v\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note the force from the damper is in opposing directions, it's easy to see when drawing a free body diagram.  Note that if the positive direction is to the right, then the force of the damper is pushing left (i.e. in the negative direction) on port_a and right (positive direction) on port_b.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: damper)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now we can do the same for the spring component.  Note that the spring is of course very similar to the damper, but now we need a relative position.  This can be obtained by integrating the port velocities, but how do we integrate in ModelingToolkit.jl?  We want to write the equation","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"x = int v space partial t","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"But we know that this is also true","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"fracpartial xpartial t = v","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"So in ModelingToolkit we can \"integrate\" by moving the differential to the appropriate side of the equation.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Spring begin\n    @parameters begin\n        k = 100\n    end\n    @variables begin\n        x(t)\n        v(t)\n        f(t)\n    end\n    @components begin\n        port_a = MechanicalPort()\n        port_b = MechanicalPort()\n    end\n    @equations begin\n        # derivatives\n        D(x) ~ v\n\n        # connectors\n        (port_a.v - port_b.v) ~ v\n        port_a.f ~ -f\n        port_b.f ~ +f\n        \n        # physics\n        f ~ k*x\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: spring)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"One thing to consider now in the Spring component is the meaning of the spring stretch/compression variable x.  What does it mean if this variable is positive or negative?  It's important to note when reviewing the model output that a positive x means the spring is compressed and vise versa for a negative x.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now, if we want to create a full mass-spring-damper system with our new Damper and Spring components, we need to create some boundary conditions, such as a stationary reference and an input force.  Createing a stationary reference in acausal modeling is a bit tricky.  We know that the velocity should be set to zero, as it's stationary.  But what should the force be?  Thinking about Newton's principles, every force on a non-moving object is met with an equal but opposite force.  Therefore we add a variable f to represent this force, which will be part of the solved system solution. ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Reference begin\n    @parameters begin\n        \n    end\n    @variables begin\n        f(t)\n    end\n    @components begin\n        port = MechanicalPort()\n    end\n    @equations begin\n        # connectors\n        port.v ~ 0\n        port.f ~ -f\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: reference)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Finally, considering an input force, we can imagine this to be an invisible hand that pushes with a constant force.  This invisible hand will move with the port with velocity v.  We don't know this velocity, it's a variable that will part of the solved system solution.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel ConstantForce begin\n    @parameters begin\n        f\n    end\n    @variables begin\n        v(t)\n    end\n    @components begin\n        port = MechanicalPort()\n    end\n    @equations begin\n        # connectors\n        port.v ~ v\n        port.f ~ f  \n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now let's assemble a mass-spring-damper system with the full collection of components.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel System begin\n    @parameters begin\n        v=0\n        x=0\n        m=100\n        d=10\n        k=1000\n        f=1\n    end\n    @components begin\n        mass = Mass(;v,m)\n        damper = Damper(;v, d)\n        spring = Spring(;v, k, x)\n        ref = Reference()\n        force = ConstantForce(;v,f)\n    end\n    @equations begin\n        connect(mass.port, damper.port_a, spring.port_a, force.port)\n        connect(damper.port_b, spring.port_b, ref.port)\n    end\nend\n\n@mtkbuild sys = System()\nprob = ODEProblem(sys, [], (0, 10))\nsol = solve(prob)\nplot(sol)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"There's a couple things we can do now to ensure the system is correct.  First, we can look at the equations.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"full_equations(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"The first equation (after re-aranging) it can be seen is the classic mass-spring-damper equation.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"m*ddotx + d*dotx + k*x = f","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"So we know all the signs and equations are set correctly.  Additionally it's easy enough in this case to re-construct the problem directly and solve to check the result.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"vars = @variables x(t)=0 dx(t)=0 ddx(t)=0\npars = @parameters m=100 d=10 k=1000 F=1\neqs = [\n    D(x) ~ dx\n    D(dx) ~ ddx\n    m*ddx + d*dx + k*x ~ F\n]\n@named odesys = ODESystem(eqs, t, vars, pars)\nsys = structural_simplify(odesys)\nprob = ODEProblem(sys, [], (0,10))\nsol = solve(prob)\nplot(sol)","category":"page"},{"location":"lectures/lecture1/#Systems-and-Sub-Systems","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Systems and Sub-Systems","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel MassSpringDamper begin\n    @parameters begin\n        m\n        k\n        d\n        v\n        x\n    end\n    @components begin\n        port_a = MechanicalPort()\n        port_b = MechanicalPort()\n        mass = Mass(;m,v)\n        damper = Damper(;d,v)\n        spring = Spring(;k,v,x)\n    end\n    @equations begin\n        connect(mass.port, damper.port_a, spring.port_a, port_a)\n        connect(damper.port_b, spring.port_b, port_b)\n    end\nend\n\n@mtkmodel System begin\n    @parameters begin\n        v = 0\n        x = 0\n    end\n    @components begin\n        msd1 = MassSpringDamper(;m = 10, d = 1, k = 1000, v, x)\n        msd2 = MassSpringDamper(;m = 20, d = 2, k = 2000, v, x)\n        msd3 = MassSpringDamper(;m = 30, d = 3, k = 3000, v, x)\n        ref = Reference()\n        force = ConstantForce(;f=1,v=0)\n    end\n    @equations begin\n        connect(force.port, msd1.port_a)\n        connect(msd1.port_b, msd2.port_a)\n        connect(msd2.port_b, msd3.port_a)\n        connect(msd3.port_b, ref.port)\n    end\nend\n\n@mtkbuild sys = System()\nprob = ODEProblem(sys, [], (0, 2))\nsol = solve(prob)\nplot(sol; idxs=[sys.msd1.spring.x, sys.msd2.spring.x, sys.msd3.spring.x])","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"how to expose ports and create hierarchy","category":"page"}]
}
