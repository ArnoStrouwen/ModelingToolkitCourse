var documenterSearchIndex = {"docs":
[{"location":"lectures/lecture2/#Lecture-2:-Developing-high-fidelity-models-of-hydraulic-systems","page":"Lecture 2: Developing high-fidelity models of hydraulic systems","title":"Lecture 2: Developing high-fidelity models of hydraulic systems","text":"","category":"section"},{"location":"#ModelingToolkit-Course","page":"Home","title":"ModelingToolkit Course","text":"","category":"section"},{"location":"lectures/lecture1/#Lecture-1:-Introduction-to-acausal-modeling-for-physical-systems-with-ModelingToolkit.jl","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"","category":"section"},{"location":"lectures/lecture1/#Background","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Background","text":"","category":"section"},{"location":"lectures/lecture1/#Julia","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Julia","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This course will use Julia as the fundamental tool to solve numerical problems.  ModelingToolkit.jl is a package writen in pure Julia and leverages the fundamental technologies of symbolic math from Symbolics.jl, numerical solvers from DifferentialEquations.jl, and automatic differentiation from ForwardDiff.jl.  To demonstrate an introduction to these technologeies, lets focus on one of the most fundamental engineering problems: the mass-spring-damper.  For now, let's leave the mass out of the system to avoid the 2nd derivative term and assume a non-linear spring (k cdot x^15)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: )","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This system can be represented by the ordinary differential equation (ODE):","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"d cdot dotx + k cdot x^15 = F","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To solve this in Julia we can apply finite differencing dotx_i = fracx_i - x_i-1Delta t and Newton's method.  Here we solve for the first time step...","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"using ForwardDiff\nusing Plots\n\nd=1\nk=1000\nΔt=1e-3\nF = 100\n\nfunction f(xᵢ, xᵢ₋₁)\n\n    ẋᵢ = (xᵢ - xᵢ₋₁)/Δt\n    lhs = d*ẋᵢ + k*xᵢ^1.5\n    rhs = F\n\n    return lhs - rhs\nend\n\n# Newton's Method\n# first time step (i=2)\nxᵢ₋₁ = 0.0\nxᵢ = xᵢ₋₁ #<-- guess\ng(xᵢ) = f(xᵢ, xᵢ₋₁)\nxᵢ -= g(xᵢ)/ForwardDiff.derivative(g, xᵢ)\nxᵢ -= g(xᵢ)/ForwardDiff.derivative(g, xᵢ)\nxᵢ -= g(xᵢ)/ForwardDiff.derivative(g, xᵢ)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note that we can get the derivative for f from automatic differentiation using ForwardDiff.derivative (or using ForwardDiff.jacobian for a system of equations).  To solve for a series of time steps, we can simply update x and run again for each time step Δt.  This is a simple form of the Implicit/Backwards Euler method.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"tol = 1e-3\nx = zeros(10)\nfor i=2:10\n    g(xᵢ) = f(xᵢ, x[i-1])\n    Δx = Inf\n    while abs(Δx) > tol\n        Δx = g(x[i])/ForwardDiff.derivative(g, x[i]) \n        x[i] -= Δx\n    end\nend\n\nplot(x; ylabel=\"x [m]\", xlabel=\"time step\")","category":"page"},{"location":"lectures/lecture1/#DifferentialEquations.jl","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"DifferentialEquations.jl","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"For this simple problem it's easy enough to implement the Newton method and solve directly, however it's possible to instead use the solvers from DifferentialEquations.jl.  To do this, we simply need to defined a NonlinearProblem by supplying the function f of the form f(up) where:","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"u\nis the variable (scalar or vector)\np\nis the parameters (scalar or vector)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"In this case u and p corespond to xᵢ and xᵢ₋₁, respectfully.  This is refered to as the \"out-of-place\" form, where each call to f allocates, it is also possible to define f(duup) as \"in-place\" form that gives du as a pre-allocated memory space to mutate.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Then we can solve by specifying the method, in this case we specify NewtonRaphson to implement Newton's method.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"using DifferentialEquations\n\nprob = NonlinearProblem(f, 0.0, 0.0)\nsol=solve(prob, NewtonRaphson(); abstol=tol)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note:  we get exactly the same result for the first time step.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To solve for a series of time steps, we can now use the remake function to update the initial guess u0 and parameter p and generate and updated NonlinearProblem efficiently.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"x = zeros(10)\nfor i=2:10\n    prob′ = remake(prob; u0=x[i], p=x[i-1])\n    sol = solve(prob′, NewtonRaphson(); abstol=tol)\n    x[i] = sol[]\nend\nplot(x; ylabel=\"x [m]\", xlabel=\"time step\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This approach requires the use of finite differencing and building a solution vector of solves for each time step, which was done only for demonstration purposes.  Since this problem is an ODE, it can and should be solved directly with an ODE solver.  To do this with DifferentialEquations.jl, we simply re-arrange the equation in the form fracpartial upartial t = f(upt).  In this case we have","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"dotx= fracF - k cdot x^15d","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"function du_dt(u,p,t)\n    F, k, d = p\n    x = u\n    return (F - k*x^1.5)/d\nend\n\nprob = ODEProblem(du_dt, 0.0, (0.0, 0.01), [F, k, d])\nsol = solve(prob)\nplot(sol; xlabel=\"time [s]\", ylabel=\"x [m]\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"In some cases, it may not be so easy to rearrange the equations in such a way to provide an ODE form.  We can also solve the problem in another way: Differential Algebraic Equations (DAE) form.  Here we have a mix of differential and algebraic equations.  A mass matrix is used to specify which equations are differential vs. algebraic.  Note that we are now solving for both x and dotx and therefore need to supply initial conditions for each.  To satisfy the system at time 0 with x=0, we can see that dotx = fracFd.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"function du_dt(u,p,t)\n    F, k, d = p\n    x, ẋ = u\n    \n    eqs = [\n        ẋ                       # D(x) = ẋ\n        (d*ẋ + k*x^1.5) - (F)   #    0 = ( lhs ) - ( rhs )\n    ]\n\n    return eqs\nend\n\nfmm = ODEFunction(du_dt; mass_matrix=[1 0; 0 0])\nprob = ODEProblem(fmm, [0.0, F/d], (0.0, 0.01), [F, k, d])\nsol = solve(prob)\nplot(sol; idxs=1, xlabel=\"time [s]\", ylabel=\"x [m]\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now, maybe we would like to know the 2nd derivative of x.  It should be easy enough to simply provide this in our function and solve.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"function du_dt(u,p,t)\n    F, k, d = p\n    x, ẋ, ẍ = u\n    \n    eqs = [\n        ẋ                       # D(x) = ẋ\n        ẍ                       # D(ẋ) = ẍ\n        (d*ẋ + k*(x^1.5)) - (F)   #    0 = ( lhs ) - ( rhs )\n    ]\n\n    return eqs\nend\n\nfmm = ODEFunction(du_dt; mass_matrix=[1 0 0;0 1 0;0 0 0])\nprob = ODEProblem(fmm, [0.0, F/d, 0.0], (0.0, 0.01), [F, k, d])\nsol = solve(prob; abstol=tol)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now we get a DtLessThanMin code, meaning the solver failed to converge.  The reason for this is an index problem, our algebraic contraint equation does not use the 2nd derivative term ddotx.  To solve index problems, the algrebraic constraints must be differentiated until they contain the highest order terms.  This can be done as an exercise, however, this provides a perfect segway to the tool that can do this for us: ModelingToolkit.jl","category":"page"},{"location":"lectures/lecture1/#ModelingToolkit.jl","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"ModelingToolkit.jl","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"ModelingToolkit.jl uses symbolic math from Symbolics.jl to provide automatic index reduction and problem simplificaiton to provide the optimal form for a numerical solver.  To define the same problem attempted previously in ModelingToolkit.jl, we first specify an independant variable t and it's differential operator","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"using ModelingToolkit\n@variables t\nD = Differential(t)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note that t is now a symbolic term.  Writing sin(t) does not compute anything, it simply represents the funciton symbolically.  Writing D(sin(t)) then represents the derivative of sin(t) with respect to t.  To compute the derivative, we can use the function expand_derivatives","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"D(sin(t)) |> expand_derivatives","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To assemble a problem symbolically for ModelingToolkit.jl, we can define our variables and equations like","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"pars = @parameters F=100 d=1 k=1000\nvars = @variables x(t)=0.0 ẋ(t)=F/d ẍ(t)=0.0\neqs = [\n    D(x) ~ ẋ\n    D(ẋ) ~ ẍ\n    d*ẋ + k*x^1.5 ~ F\n]","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note the variables are defined as a function of the independent variable t and given initial conditions which is captured in the variable vars.  The equations are then defined using the tilde ~ operator, which represents the equation equality.  This information is then fed to an ODESystem constructor and simplified using the structural_simplify function.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@named odesys = ODESystem(eqs, t, vars, pars)\nsys = structural_simplify(odesys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"As can be seen, the 3 equation system is simplified down to 1 equation.  To see the solved states and equations we can use the respecive functions","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"states(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now we are solving for only x(t) with the equation:","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"equations(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"This seems correct, but what is ẋ(t)?  This variable has been moved to the observables of the system, which are terms which can be computed algebraicly.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"observed(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Notice how the 2nd derivative term ẍ(t) has been automatically determined from the symbolic derivative of ẋ(t).","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"We can now assembly a problem and solve it.  The initial conditions do not need to be supplied here because the sys contains the variable defaults from vars.  The solution object sol can now be indexed symbolically from any symbol of the system regardles if it's a solved variable, observable, or even a parameter.  This way, if for example doing a batch of simulations, each respective solution object can easily retrieve all respective information about the simulation.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"prob = ODEProblem(sys, [], (0.0, 0.01))\nsol = solve(prob; abstol=tol)\nplot(sol; idxs=ẍ, xlabel=\"time [s]\", ylabel=\"ẍ [m/s^2]\")","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"The solution can also be indexed by expression, for example plotting the damping and spring force components can be done as so","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"plot(sol; idxs=x^1.5*k, xlabel=\"time [s]\", ylabel=\"force [N]\")\nplot!(sol; idxs=ẋ*d)","category":"page"},{"location":"lectures/lecture1/#Solving-a-system-of-equations-(NonlinearSystem)","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Solving a system of equations (NonlinearSystem)","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Use ModelingToolkit to solve the problem\nintroduce @parameters\nshow the f function\nshow the jacobian\nintroduce equations, defaults, and how to setup initial conditions and parameters","category":"page"},{"location":"lectures/lecture1/#[Practice-Problem]","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"[Practice Problem]","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"introduce remake\nplot a solution set (do something that errors once the initial conditions are not defaulted correctly)","category":"page"},{"location":"lectures/lecture1/#Acausal-Component-Based-Modeling","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Acausal - Component Based Modeling","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"ModelingToolkit.jl enables the appliction of Physical Network Acausal modeling, which is a type of modeling which is component based allowing one to build models by assembling parts together from a library.  The key to how this works is thru a simple rule of how components are connected.  A connection must define at minimum 2 variables (through and across) which follows the rules:","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"connections can only be made by like connectors (i.e. same pairs of through and across variables from the same physical domain)\nthrough variables sum to zero at connection points\nacross variables are equal at connection points","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Consider a simple mechanical translational system of a mass and damper.  In this domain the through variable is force (f) and the across velocity (v).  We can define the mass component as","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"f_mass = m_mass cdot dotv_mass","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"And the damper component as","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"f_damper = d_damper cdot v_damper","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Based on the rules above, connecting these 2 components together would give the following additional equations","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"beginaligned 0 = f_mass + f_damper  v_mass = v_damper endaligned  \n\nWith simple substitution it can be seen that this gives the expected mass-damper system\n\nm cdot dotv + d cdot v = 0","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Let's try this again by defining this system in ModelingToolkit.jl","category":"page"},{"location":"lectures/lecture1/#Connections","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Connections","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"demonstrate the theory of connections\nTODO: reference to where nodal network modeling originated?\nthru variables sum\naccross variables are equal\nQuestion: does the across variable have to be velocity?  Could it be any other derivative?","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To define a connection in ModelingToolkit.jl we use the @connector macro and specify the through variable with connect = Flow","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@connector MechanicalPort begin\n    v(t)\n    f(t), [connect = Flow]\nend","category":"page"},{"location":"lectures/lecture1/#Components","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Components","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"demonstrate how components are defined\nbest practices","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"To define a component, we use the @mtkmodel macro and define it's parameters, variables, connection ports, and equations.  The mass component can be defined as","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Mass begin\n    @parameters begin\n        m = 10\n    end\n    @variables begin\n        v(t) = 0\n        f(t) = 0\n    end\n    @components begin\n        port = MechanicalPort(;v=v, f=f)\n    end\n    @equations begin\n        # connectors\n        port.v ~ v\n        port.f ~ f\n        \n        # physics\n        f ~ m*D(v)\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"A general rule of thumb is that a base level component should have an equation number that matches the number of variables + connectors.  The Mass component has 2 variables and 1 connector and therefore 3 equations.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Similarly the damper component is defined as","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Damper begin\n    @parameters begin\n        d = 1\n    end\n    @variables begin\n        v(t) = 0\n        f(t) = d*v\n    end\n    @components begin\n        port = MechanicalPort(;v=v, f=f)\n    end\n    @equations begin\n        # connectors\n        port.v ~ v\n        port.f ~ f\n        \n        # physics\n        f ~ d*v\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now the Mass and Damper components can be assembled in a system and connected together (note: the connect equation).  Also note the parameters v, m, and d are defined to expose the properties which can be set at keyword arguments of the same name.  ","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel System begin\n    @parameters begin\n        v\n        m\n        d\n    end\n    @components begin\n        mass = Mass(;v,m)\n        damper = Damper(;v,d)\n    end\n    @equations begin\n        connect(mass.port, damper.port)\n    end\nend\n\n@mtkbuild sys = System(;v=100, m=5, d=3)\nfull_equations(sys)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"As can be seen we arrive at the same equation as derived previously.  Now it would be easy to define a system that adds a spring, or has a series of connected masses, springs, dampers, etc.  ","category":"page"},{"location":"lectures/lecture1/#[Practice-Problem]-2","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"[Practice Problem]","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"add a spring component to the above system\nhow to define a spring or damper with 2 ports?","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"The Damper component created previously was a little incomplete because it only had one port.  In reality a damper or spring will be connected between 2 objects, for example the car frame and the wheel.  Therefore a proper component will define 2 ports so that the component can be as analogous with real life as possible.  In the example below the component is defined properly with 2 ports.  Note the velocity of the component v is defined as a relative velocity between the 2 ports.  It's easy to understand how this works if it's assumed that port_b is connected to a stationary reference frame.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Damper begin\n    @parameters begin\n        d = 1\n        v_a\n        v_b\n    end\n    @variables begin\n        v(t) = v_a - v_b\n        f(t) = d*v\n    end\n    @components begin\n        port_a = MechanicalPort(;v=v_a, f=-f)\n        port_b = MechanicalPort(;v=v_b, f=+f)\n    end\n    @equations begin\n        # connectors\n        (port_a.v - port_b.v) ~ v\n        port_a.f ~ -f\n        port_b.f ~ +f\n        \n        # physics\n        f ~ d*v\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Note the force from the damper is in opposing directions, it's easy to see when drawing a free body diagram.  Note that if the positive direction is to the right, then the force of the damper is pushing left (i.e. in the negative direction) on port_a and right (positive direction) on port_b.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"(Image: damper)","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now we can do the same for the spring component.  Note that the spring is of course very similar to the damper, but now we need a relative position.  This can be obtained by integrating the port velocities, but how do we integrate in ModelingToolkit.jl?  We want to write the equation","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"x = int v space partial t","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"But we know that this is also true","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"fracpartial xpartial t = v","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"So in ModelingToolkit we can \"integrate\" by moving the differential to the appropriate side of the equation.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Spring begin\n    @parameters begin\n        k = 100\n        v_a\n        v_b\n    end\n    @variables begin\n        x(t) = 0\n        v(t) = v_a - v_b\n        f(t) = k*x\n    end\n    @components begin\n        port_a = MechanicalPort(;v=v_a, f=-f)\n        port_b = MechanicalPort(;v=v_b, f=+f)\n    end\n    @equations begin\n        # derivatives\n        D(x) ~ v\n\n        # connectors\n        (port_a.v - port_b.v) ~ v\n        port_a.f ~ -f\n        port_b.f ~ +f\n        \n        # physics\n        f ~ k*x\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Now, if we want to create a full mass-spring-damper system with our new Damper and Spring components, we need to create some boundary conditions, such as a stationary reference and an input force.  Createing a stationary reference in acausal modeling is a bit tricky.  We know that the velocity should be set to zero, as it's stationary.  But what should the force be?  Thinking about Newton's principles, every force on a non-moving object is met with an equal but opposite force.  Therefore we add a variable f to represent this force, which will be part of the solved system solution.","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel Reference begin\n    @parameters begin\n        \n    end\n    @variables begin\n        f(t)\n    end\n    @components begin\n        port = MechanicalPort(;v=0, f=f)\n    end\n    @equations begin\n        # connectors\n        port.v ~ 0\n        port.f ~ f\n    end\nend","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"Finally, considering an input force...","category":"page"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"@mtkmodel ConstantForce begin\n    @parameters begin\n        f\n    end\n    @variables begin\n        v(t)=0\n    end\n    @components begin\n        port = MechanicalPort(;v=v, f=f)\n    end\n    @equations begin\n        # connectors\n        port.v ~ v\n        port.f ~ f  \n    end\nend","category":"page"},{"location":"lectures/lecture1/#Systems-and-Sub-Systems","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Systems and Sub-Systems","text":"","category":"section"},{"location":"lectures/lecture1/","page":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","title":"Lecture 1: Introduction to acausal modeling for physical systems with ModelingToolkit.jl","text":"how to expose ports and create hierarchy","category":"page"}]
}
